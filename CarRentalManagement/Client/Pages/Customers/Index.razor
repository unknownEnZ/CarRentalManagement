@page "/Customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Customers </h3>
<br />

@if (Customers == null)
{
    <div class="alert alert-info">Loading Customers...</div>
}
else
{
    <table class="table table-responsive">
        @* <thread>
    <tr>
    <th>Name</th>
    <th>Actions</th>
    </tr>
    </thread> *@

        <thead>
            <tr>
                <th>Driving License</th>
                <th>Contact Number</th>
                <th>Email address</th>
                <th>Actions</th>
               
                
            </tr>
        </thead>

        <tbody>
            @foreach (var Customer in Customers)
            {
                <tr>
                    <td>@Customer.DriverLicense</td>
                    <td>
                        <a href="/Customers/view/@Customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>

                        <a href="/Customers/edit/@Customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-danger" @onclick="@(()=>Delete(Customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    async Task Delete(int CustomerId)
    {
        if (Customers != null)
        {
            var Customer = Customers.First(q => q.Id == CustomerId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Customer.DriverLicense}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{CustomerId}");

                await OnInitializedAsync();
            }
        }
    }

}
